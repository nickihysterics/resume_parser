import os
import json
import shutil
import argparse
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter

from parser.text_reader import extract_text
from parser.extractor import extract_basic_info
from parser.normalize import normalize_whitespace


def parse_args():
    parser = argparse.ArgumentParser(description="–ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—é–º–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π")
    parser.add_argument("--input", "-i", default="data/resumes", help="–ü–∞–ø–∫–∞ —Å —Ä–µ–∑—é–º–µ (.pdf, .docx)")
    parser.add_argument("--output", "-o", default="data/output", help="–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--export-xlsx", action="store_true", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Excel")
    parser.add_argument("--filter", "-f", nargs="+", help="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–≤—ã–∫–∞–º")
    parser.add_argument("--any", action="store_true", help="–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ª—é–±–æ–º—É –∏–∑ –Ω–∞–≤—ã–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø–æ –≤—Å–µ–º)")
    parser.add_argument("--search", "-s", type=str, help="–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
    parser.add_argument("--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–≤—ã–∫–∞–º")
    parser.add_argument("--copy-matching", action="store_true", help="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—é–º–µ –≤ output/matched/")
    return parser.parse_args()


args = parse_args()
INPUT_DIR = args.input
OUTPUT_DIR = args.output
os.makedirs(OUTPUT_DIR, exist_ok=True)

results = []

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ
for filename in os.listdir(INPUT_DIR):
    filepath = os.path.join(INPUT_DIR, filename)
    try:
        text = extract_text(filepath)
        text = normalize_whitespace(text)
        info = extract_basic_info(text)
        info['filename'] = filename
        results.append(info)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        with open(os.path.join(OUTPUT_DIR, f"{os.path.splitext(filename)[0]}.txt"), "w", encoding="utf-8") as f:
            f.write(text)

        print(f"[+] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {filename}")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filename}: {e}")

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–≤—ã–∫–∞–º
filtered_results = results
if args.filter:
    filter_skills = [s.lower() for s in args.filter]

    def matches_skills(candidate):
        candidate_skills = [s.lower() for s in candidate.get("skills", [])]
        return any(skill in candidate_skills for skill in filter_skills) if args.any \
            else all(skill in candidate_skills for skill in filter_skills)

    filtered_results = list(filter(matches_skills, filtered_results))
    mode = "–ª—é–±–æ–º—É" if args.any else "–≤—Å–µ–º"
    print(f"[i] –ù–∞–π–¥–µ–Ω–æ {len(filtered_results)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ {mode} –∏–∑ –Ω–∞–≤—ã–∫–æ–≤: {', '.join(args.filter)}")

# –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
if args.search:
    keywords = [kw.lower() for kw in args.search.split()]

    def matches_search(candidate):
        fields = [
            candidate.get("name", ""),
            candidate.get("email", ""),
            candidate.get("phone", ""),
            " ".join(candidate.get("skills", [])),
            " ".join(candidate.get("experience", [])),
            " ".join(candidate.get("education", []))
        ]
        return all(kw in " ".join(fields).lower() for kw in keywords)

    filtered_results = list(filter(matches_search, filtered_results))
    print(f"[i] –ù–∞–π–¥–µ–Ω–æ {len(filtered_results)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É: '{args.search}'")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
if args.stats:
    total = len(filtered_results)
    all_skills = [s.lower() for c in filtered_results for s in c.get("skills", [])]
    skill_counter = Counter(all_skills)
    avg_skills = round(len(all_skills) / total, 2) if total else 0

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–í—Å–µ–≥–æ —Ä–µ–∑—é–º–µ: {total}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤: {avg_skills}")
    print("–¢–æ–ø-10 –Ω–∞–≤—ã–∫–æ–≤:")
    for skill, count in skill_counter.most_common(10):
        print(f"  {skill} ‚Äî {count}")

    if skill_counter:
        skills, counts = zip(*skill_counter.most_common(10))
        plt.figure(figsize=(10, 6))
        plt.bar(skills, counts)
        plt.title("–¢–æ–ø-10 –Ω–∞–≤—ã–∫–æ–≤ —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        plt.xticks(rotation=45)
        plt.tight_layout()
        chart_path = os.path.join(OUTPUT_DIR, "skills_chart.png")
        plt.savefig(chart_path)
        print(f"[‚úì] –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {chart_path}")

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∑—é–º–µ
if args.copy_matching:
    matched_dir = os.path.join(OUTPUT_DIR, "matched")
    os.makedirs(matched_dir, exist_ok=True)

    for candidate in filtered_results:
        src = os.path.join(INPUT_DIR, candidate["filename"])
        dst = os.path.join(matched_dir, candidate["filename"])
        try:
            shutil.copy2(src, dst)
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {candidate['filename']}: {e}")

    print(f"[‚úì] –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(filtered_results)} –≤ {matched_dir}")

# –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
with open(os.path.join(OUTPUT_DIR, "summary.json"), "w", encoding="utf-8") as f:
    json.dump(filtered_results, f, indent=2, ensure_ascii=False)

if args.export_xlsx:
    pd.DataFrame(filtered_results).to_excel(os.path.join(OUTPUT_DIR, "summary.xlsx"), index=False)
    print("[‚úì] summary.xlsx —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")